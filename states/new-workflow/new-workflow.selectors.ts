import { AppState } from '../../app.state';
import { createSelector } from '@ngrx/store';
import { NewWorkflowState } from './new-workflow.reducer';

export const selectNewWorkflow = (state: AppState) => state.newWorkflowState;

export const selectRequestedItems = createSelector(selectNewWorkflow, ({ requestedItems }: NewWorkflowState) => requestedItems);
export const selectRequestedItemsLeft = createSelector(selectNewWorkflow, ({ requestedItemsLeft }: NewWorkflowState) => requestedItemsLeft);
export const selectAllBeneficiaries = createSelector(selectNewWorkflow, ({ allBeneficiaries }: NewWorkflowState) => allBeneficiaries);
export const selectRequestedBeneficiaries = createSelector(selectNewWorkflow, ({ requestedBeneficiaries }: NewWorkflowState) => requestedBeneficiaries);
export const selectBeneficiary = createSelector(selectNewWorkflow, ({ beneficiary }: NewWorkflowState) => beneficiary);
export const selectSelectedItems = createSelector(selectNewWorkflow, ({ selectedItems }: NewWorkflowState) => selectedItems);
export const selectCurrentServerTime = createSelector(selectNewWorkflow, ( { serverTime: serverUtcTime }: NewWorkflowState ) => serverUtcTime);
export const selectStartTimeReadonly =  createSelector(selectNewWorkflow, ( { startTimeReadonly }: NewWorkflowState ) => startTimeReadonly);
export const selectFinishTimeReadonly =  createSelector(selectNewWorkflow, ( { finishTimeReadonly }: NewWorkflowState ) => finishTimeReadonly);
export const selectStartTime =  createSelector(selectNewWorkflow, ( { startTime }: NewWorkflowState ) => startTime);
export const selectFinishTime =  createSelector(selectNewWorkflow, ( { finishTime }: NewWorkflowState ) => finishTime);
export const selectSuccessMessage =  createSelector(selectNewWorkflow, ( { successMessage }: NewWorkflowState ) => successMessage);
export const selectErrorMessage =  createSelector(selectNewWorkflow, ( { errorMessage }: NewWorkflowState ) => errorMessage);
export const selectTargetAccountOptions =  createSelector(selectNewWorkflow, ( { targetAccountOptions }: NewWorkflowState ) => targetAccountOptions);
export const selectOwnedPrivilegedAccountsToUnlock =  createSelector(selectNewWorkflow, ( { ownedPrivilegedAccountsToUnlock }: NewWorkflowState ) => ownedPrivilegedAccountsToUnlock);
export const selectFoundOwnedPrivilegedAccounts =  createSelector(selectNewWorkflow, ( { foundOwnedPrivilegedAccounts }: NewWorkflowState ) => foundOwnedPrivilegedAccounts);
export const selectFoundOwnedPrivilegedAccountTargets =  createSelector(selectNewWorkflow, ( { foundOwnedPrivilegedAccountTargets }: NewWorkflowState ) => foundOwnedPrivilegedAccountTargets);
export const selectSelectedPrivilegedAccountTarget = createSelector(selectNewWorkflow, ( { selectedPrivilegedAccountTarget }: NewWorkflowState ) => selectedPrivilegedAccountTarget);
export const selectSelectedPrivilegedAccountName = createSelector(selectNewWorkflow, ( { selectedOwnedPrivilegedAccountName }: NewWorkflowState ) => selectedOwnedPrivilegedAccountName);
export const selectSelectedRole =  createSelector(selectNewWorkflow, ( { selectedRole }: NewWorkflowState ) => selectedRole);
export const selectSelectedRoleType =  createSelector(selectNewWorkflow, ( { selectedRoleType }: NewWorkflowState ) => selectedRoleType);
export const selectSelectedRoleName =  createSelector(selectNewWorkflow, ( { selectedRoleName }: NewWorkflowState ) => selectedRoleName);
export const selectSelectedRoleDesctiprion =  createSelector(selectNewWorkflow, ( { selectedRoleDescription }: NewWorkflowState ) => selectedRoleDescription);
export const selectAllRoleOptions =  createSelector(selectNewWorkflow, ( { allRoles }: NewWorkflowState ) => allRoles);
export const selectRequestedRoles =  createSelector(selectNewWorkflow, ( { requestedRoles }: NewWorkflowState ) => requestedRoles);
export const selectAllRequestedOwners =  createSelector(selectNewWorkflow, ( { allRequestedOwners }: NewWorkflowState ) => allRequestedOwners);
export const selectRequestedOwners =  createSelector(selectNewWorkflow, ( { requestedOwners }: NewWorkflowState ) => requestedOwners);
export const selectRootOwner = createSelector(selectNewWorkflow, ( { rootOwner }: NewWorkflowState ) => rootOwner);
export const selectSelectedOwner = createSelector(selectNewWorkflow, ( { selectedOwner }: NewWorkflowState ) => selectedOwner);
export const selectServerSelectedItems = createSelector(selectNewWorkflow, ( { serverSelectedItems }: NewWorkflowState ) => serverSelectedItems);
export const selectIsRequestable = createSelector(selectNewWorkflow, ( { isRequestable }: NewWorkflowState ) => isRequestable);
export const selectIsAutoApproved = createSelector(selectNewWorkflow, ( { isAutoApproved }: NewWorkflowState ) => isAutoApproved);
export const selectAssignmentRuleBody = createSelector(selectNewWorkflow, ( { assignmentRuleBody }: NewWorkflowState ) => assignmentRuleBody);
export const selectAssignmentRuleSignature = createSelector(selectNewWorkflow, ( { assignmentRuleSignature }: NewWorkflowState ) => assignmentRuleSignature);
export const selectTicket = createSelector(selectNewWorkflow, ( { ticket }: NewWorkflowState ) => ticket);
export const selectRequesterComment = createSelector(selectNewWorkflow, ( { requesterComment }: NewWorkflowState ) => requesterComment);
export const selectSelectedTargetAccountOptions = createSelector(selectNewWorkflow, ( { selectedTargetAccountOptions }: NewWorkflowState ) => selectedTargetAccountOptions);
export const selectIsActive = createSelector(selectNewWorkflow, ( { isActive }: NewWorkflowState ) => isActive);
